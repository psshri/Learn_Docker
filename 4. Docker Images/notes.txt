How to create an image?

You would follow the below list of steps in order to setup an app
1) OS - Ubuntu
2) Update apt repo
3) Install dependencies using apt
4) Install Python dependencies using pip
5) Copy source code to /opt folder
6) Run the web server using "flask" command

Command: docker build Dockerfile -t psshri/mywebapp
Once you have written the Dockerfile, build your image using the docker build command and specify the
docker file as input as well as a tag name for the image. This will create an image locally on your 
system. To make it available to the public Docker hub registry, run the docker push command and specify
the name of the image you just created.
Command: docker push psshri/mywebapp

Docker file is a text file written in a specific format that Docker can understand. 
INSTRUCTION ARGUMENT format.

Line: FROM Ubuntu
Explaination: Defines what should be the base OS for the container. Every docker image must be based
off of another image, either an OS or another image that was created before based on an OS.
All docker files must start with a FROM instruction 

Line: RUN apt-get update
Explaination: The RUN command instructs Docker to run a particular command on those base images.

Line: COPY . /opt/source-code
Explaination: The COPY instruction copies files from the local system onto the Docker image

Line: ENTRY_POINT FLASK_APP=/opt/source-code/app.py flask run
Explaination: ENTRY_POINT allows us to specify a command that will be run when the image is run as a 
container

When docker builds the images, it builds these in a layered architecture. Each line of instructions
creates a new layer in the docker image with just the changes from the previous layer


**************Dockerfile**********************
FROM Ubuntu                                             Layer1. Base Ubuntu layer

RUN apt-get update                                      Layer2. Changes in apt packages                                   
RUN apt-get -y install python

RUN pip install flask flask-mysql                       Layer3. Changes in pip packages

COPY . /opt/source-code                                 Layer4. Source Code

ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run  Layer5. Update Entrypoint with "flask" command

**************************************************************************

Each layer only stores the changes from the previous layer, it is reflected in the size as well.
You can see the size of each layer if you run docker history command as below
Command: docker history {image_name}

When you run docker build command, you could see the various steps involved and the result of each
task. All the layers build are cached so the layered architecture helps you restart docker build
from that particular step in case it fails or if you were to add new steps in the build process you
wouldn't have to start all over again. This way, building an image is faster and you don't have to 
wait for the docker to rebuilt the entire image each time. This is helpful especially when you update
the source code of your application as it may change more frequently, only the layers above the updated
layers needs to be rebuild.

You can containerize any application.