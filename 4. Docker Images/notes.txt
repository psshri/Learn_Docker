How to create an image?

You would follow the below list of steps in order to setup an app
1) OS - Ubuntu
2) Update apt repo
3) Install dependencies using apt
4) Install Python dependencies using pip
5) Copy source code to /opt folder
6) Run the web server using "flask" command

Command: docker build Dockerfile -t psshri/mywebapp
Once you have written the Dockerfile, build your image using the docker build command and specify the
docker file as input as well as a tag name for the image. This will create an image locally on your 
system. To make it available to the public Docker hub registry, run the docker push command and specify
the name of the image you just created.
Command: docker push psshri/mywebapp

Docker file is a text file written in a specific format that Docker can understand. 
INSTRUCTION ARGUMENT format.

Line: FROM Ubuntu
Explaination: Defines what should be the base OS for the container. Every docker image must be based
off of another image, either an OS or another image that was created before based on an OS.
All docker files must start with a FROM instruction 

Line: RUN apt-get update
Explaination: The RUN command instructs Docker to run a particular command on those base images.

Line: COPY . /opt/source-code
Explaination: The COPY instruction copies files from the local system onto the Docker image

Line: ENTRY_POINT FLASK_APP=/opt/source-code/app.py flask run
Explaination: ENTRY_POINT allows us to specify a command that will be run when the image is run as a 
container

When docker builds the images, it builds these in a layered architecture. Each line of instructions
creates a new layer in the docker image with just the changes from the previous layer


**************Dockerfile**********************
FROM Ubuntu                                             Layer1. Base Ubuntu layer

RUN apt-get update                                      Layer2. Changes in apt packages                                   
RUN apt-get -y install python

RUN pip install flask flask-mysql                       Layer3. Changes in pip packages

COPY . /opt/source-code                                 Layer4. Source Code

ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run  Layer5. Update Entrypoint with "flask" command

**************************************************************************

Each layer only stores the changes from the previous layer, it is reflected in the size as well.
You can see the size of each layer if you run docker history command as below
Command: docker history {image_name}

When you run docker build command, you could see the various steps involved and the result of each
task. All the layers build are cached so the layered architecture helps you restart docker build
from that particular step in case it fails or if you were to add new steps in the build process you
wouldn't have to start all over again. This way, building an image is faster and you don't have to 
wait for the docker to rebuilt the entire image each time. This is helpful especially when you update
the source code of your application as it may change more frequently, only the layers above the updated
layers needs to be rebuild.

You can containerize any application.


===============================================================================================

Environment Variables

Environment variables are used to pass a certain parameter to the applicatoin code. Otherwise,
will have to update the application code and build image each time we make any change to 
the application's parameters

Command: docker run -e APP_COLOR=blue simple-webapp-color
Explaination: the above command runs a container out of the image simple-webapp-color and passes
an environment variable APP_COLOR and assigns the value blue to it.

How to find the environment variable set on a container that's already running
Command: docker inspect {container_name}

=====================================================================

Commands vs Entrypoints

If you run a container based on ubuntu image, it will exit as soon as it is executed, this is because
unlike VMs, containers are not meant to host an operating system. Containers are meant to run a specific
task or process such as to host an instance of a web server or application server or a database or simply
to carry out some kind of computation or analysis. Once the task is complete the container exits, the 
container only lives as long as the process inside it is alive. If the web service inside the container
is stopped or crashes the container exits.

The CMD command inside a dockerfile of an image decides what programs will be run within the container
when it starts for the NGINX image.

In case of an ubuntu image dockerfile, the CMD command is 'bash'. Bash is not really a process like
web server or database server. It is a shell that listens for inputs from a terminal if it cannot
find a terminal it exits. When we run an ubuntu container, it launches the bash program, by default 
docker does not attach a terminal to a container when it is run, so the bash program does not find the
terminal and so it exits since the process that was started when the container was created finished, 
the container exits as well.

How do you specify a different command to start the container?
One way is to append a command to the docker run command and that way it overrides the default command
specified within the image
Command: docker run ubuntu sleep 5

How do you make that change permanent?
If you always want the ubuntu image to sleep 5 seconds when it starts. You would then create your 
own image from the base ubuntu image and specify in a new command

Dockerfile
FROM Ubuntu
CMD sleep 5

docker build -t ubuntu-sleeper .

Format for the CMD command

CMD command param1 ==== CMD sleep 3
CMD ["command", "param1"] ==== CMD ["sleep", "5"]

What if we want to modify the sleep time amount?
One way is to pass the command in docker run command. 
like: docker run ubuntu-sleeper sleep 10
But we would like to only pass the amount of seconds and not the word 'sleep' actually
something like: docker run ubuntu-sleeper 10
we would want the sleep command to be invoked automatically
This is where the entrypoint instruction comes in.

The entrypoint instruction is like the command instruction as in you can specify the program that will
be run when the container starts and whatever you specify on the command line, in this case 10, will
append to the entrypoint, so the commands that will be run when the container starts is sleep 10

Dockerfile
FROM Ubuntu
ENTRYPOINT ["sleep"]

docker run ubuntu-sleeper 10
In the above command if we do not add 10 as the command, then will get error that the operand is missing.
So, how would you configure a default value for the command if one is not specified in the command line.
That's where you would use both entry point as well as command 

Dockerfile
FROM Ubuntu
ENTRYPOINT ["sleep"]
CMD ["5"]

if you want to use the CMD and ENTRYPOINT command together, do use the JSON format only

So basically, in case of CMD instructions, the command line parameters passed will get replaced entirely
whereas in case of entrypoint the command line parameters will get appended

If you want to replace the ENTRYPOINT command itself, then specify it during docker run command
like: docker run --entrypoint sleep2.0 unbuntu-sleeper 10