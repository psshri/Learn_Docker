When you install docker, it creates 3 networks automatically: bridge, none and host. Bridge is the 
default network a container gets attached to. If you would like to associate the container with any other
network you specify the network information using the following command
Command: docker run ubuntu --network=none

The bridge network is a private internal network created by docker on the host. All containers are 
attached to this network by default and they get an internal IPA ususally in the range 172.17 series.
The containers can access each other using this internal IP if required. To access any of these 
containers from the outside world, map the ports of these containers to ports on the host. 

Another way to access the containers externally is to associate the container to the host network. This 
takes out any network isolation between the docker host and the docker container. Meaning, if you were
to run a web server on port 5000 in a web container, it is automatically accessible on the same port
externally without requiring any port mapping as the web container uses the host network. This would
also mean that unlike before, you will now not be able to run multiple web containers on the same host
on the same port as the ports are now common to all containers in the host network. 

With the none network, the containers are not attached to any network and doesn't have access to any 
external network or other containers. They run in an isolated network


-----------------------------------
User-defined networks

By default, docker only creates one internal bridge network. We can create our own internal network
using the command docker network create and specify the driver like below
Command: docker network create --driver bridge --subnet 182.18.0.0/16 custom-isolated-network

How do we see the network settings and IPA assigned to existing containers.
Command: docker inspect {container_name/container_id}
-----------------------------------

Embedded DNS

Containers can reach each other using their names. If we have a web server container and a mysql database
container running on the same node. How can we get our web server to access the database on the 
database container. One thing that we can do is, to use the internal IP address assigned to the MYSQL
container. But this method is not very ideal because it is not guaranteed that the container will get the
same IP when the system reboots. The right way to do it is to use the container name. All containers in the
docker host can resolve each other with the name of the container. Docker has a built in DNS server that 
helps the containers to resolve each other using the container name. The built in DNS server always 
runs at address 127.0.0.11.

How does docker implement networking, what are the technology behind it, how were the containers isolated
within the host.
Docker uses network namespaces that creates a separate namespace for each container. It then uses
virtual ethernet pairs to connect containers together.

____________________________________________________

Example: Deploy a web application named "webapp" using the "kodekloud/simple-webapp-mysql image.
Expose the port 38080 on the host. The application makes use of two environment variables.
1. DB_Host with the value "mysql-db"
2. DB_Password with the value "db_pass123"
Make sure to attach it to the newly created network called "wp-mysql-network". Also, make sure to 
link the "MySQL" and the "webapp" container

Command: docker run --network=wp-mysql-network -e DB_Host=mysql-db -e DB_Password=db_pass123 
-p 38080:8080 --name webapp --link mysql-db:mysql-db -d kodekloud/simple-webapp-mysql