Objectives
-What are Containers?
-What is Docker?
-Why do you need it?
-What can it do?
-Run Docker Containers
-Create a Docker Image
-Networks in Docker
-Docker Compose
-Docker Concepts in depth
-Docker for Windows/Mac
-Docker Swarm
-Docker vs Kubernetes

*******************************************************

Why do you need Docker?
-If you have an application stack that uses various technologies like a web server using Node.js, database
such as MongoDB, a messaging system like Redis and an orchestration tool like Ansible. You will face a 
lot of difficulty in developing this application stack with all these different components. First of all,
their compatibility with the underlying OS would be an issue. You will need to ensure that all these
different services were compatible with the version of the OS. If any of your service is not compatible
with the OS you have, then you will have to look for some other OS which is compatible with all the services.
Secondly, you would have to check the compatibility between the services and the libraries and dependencies 
on the OS. You might see that one of your service will require one version of your dependent library, whereas
another service requires another version. Also, the architecture of your application will change over time.
You will upgrade the components to a newer version or change the database, etc. Every time something changes, 
you will have to undergo the same process of checking compatibility between these various components and
the underlying infrastructure. No doubt, this compatibility matrix is referred to as "The Matrix from Hell".
Also, everytime a new developer on board, they would have to follow a large set of instructions to setup their
environments. They would have to make sure that they use the right OS, right versions of each of these
components and each developer had to setup all that up by themself each time. You will also have different
development, test and production environment. You cannot guarantee that the application you built would
run the same way in different environments. All these complexities would make your life difficult in developing,
building and shipping the application.
-So, we need something that could help us with the compatibility issue and something that would allow us
to modify a component without affecting the other component or even modify the underlying OS as required.
-With Docker, you can run each component in a separate container with its own dependencies and its own
libraries all on the same VM and the OS

What are Containers?
-Containers are completely isolated environments, they can have their own processes or services, their
own network interfaces, except they all share the same OS kernel.
-Some of the different types of containers are: LXC, LXD, LXCFS, etc. Docker utilized LXC containers.
-Setting up these container environments is hard as they are very low-level and that is where Docker
offers a high-level tool with several powerful functionalities making it really easy for end users like us.

Basic concepts of OS
-Operating Systems like Ubuntu, Fedora CentOS, they all consists of two things, an OS kernel and a
set of software. The OS kernel is reponsible for interacting with the underlying hardware. In this case,
the underlying kernel is Linux, its the software above it that makes these OS different. So, you have a 
common Linux kernel shared across all OSs and some custom software that differentiate OS from each other

Sharing the Kernel
-Docker containers share the underlying kernel. Let's say we have a system with Ubuntu OS with Docker
installed on it, Docker can run any flavour of OS on top of it as long as they are all based on the same
kernel, in this case Linux. If the underlying OS is ubuntu, Docker can run a container based on another
distribution like Debian, Fedora, Suse or CentOS. Each Docker container only has the additional software
that makes these OS different and Docker utilized the underlying kernel of the Docker host, which works
with all OSs above. So what is an OS that does not share the same kernel as this? Windows. So you won't
be able to run a Windows-based container on a Docker host with Linux on it. For that you will require
a Docker on a Windows server.
-Now you might say that you can run a container based on Linux on a Docker installed on Windows server.
When you install Docker on Windows and run a Linux container on Windows, you are not really running a
Linux conatiner on Windows. Windows runs a Linux container on a Linux VM under the host. So, it's really
Linux container on Linux VM on Windows.
-The main purpose of Docker is to package and containerize applications and to ship them and to run
them anywhere anytime as many times as you want

Containers vs Virtual Machines
-In case of containers, we have an underlying Hardware Infrastructure, then we have OS on top of it,
then Docker installed on top of OS. Docker then manages the containers, that runs with Libraries and
Dependencies alone.
-In case of VMs, we have the hypervisor like ESX on the Hardware Infrastructure and then the VM on them.
Each VM has its own OS inside it, then the dependencies, libraries and then the applications.
-The overhead causes higher utilization of underlying resources as there are multiple virtual OS 
and kernels running. The VMs also consume higher disk space as each VM is heavy and is usually in GBs in size.
Whereas Docker containers are lightweight and usually MB in size. This allows docker containers to boot
up faster, usually in a matter of seconds. Whereas VMs takes minutes to boot up, as it needs to boot up
the entire OS.
-Docker has less isolation as more resources are shared between the containers like the kernel, whereas,
VMs have complete isolation from each other. Since VMs don't rely on underlying OS or kernel, you can 
run different types of applications built on different OSs such as Linux-based or Windows-based apps on
the same hypervisor.
-It's not an either container or VM situation but containers and VMs. We want to take the advantages
of both the technologies. We can use the benefits of virtualization to easily provision or decommision 
Docker hosts as required and at the same time make use of the benefits of Docker to easily provision
applications and quickly scale them as required.

Container VS Image
-An image is a package or a template, it is used to create one or more containers. Containers are running
instances of images

